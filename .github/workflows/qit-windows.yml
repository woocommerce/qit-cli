name: QIT Environment Dangling Test

on:
  # Every day at 11pm UTC (6pm ET)
  schedule:
    - cron: '0 23 * * *'
  # Manually
  workflow_dispatch:

jobs:
  environment_dangling_tests:
    runs-on: ubuntu-latest
    env:
      NO_COLOR: 1
      QIT_DISABLE_ONBOARDING: yes
    steps:
      - name: Checkout code (Cross-platform)
        uses: actions/checkout@v4

      - name: Setup PHP (Cross-platform)
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.3'

      - name: Composer install (Unix)
        working-directory: src
        run: composer install

      - name: Enable dev mode
        working-directory: src
        run: php qit-cli.php dev

      - name: Connect to Staging QIT
        working-directory: src
        run: php qit-cli.php backend:add --environment="staging" --qit_secret="${{ secrets.QIT_STAGING_SECRET }}" --manager_url="https://stagingcompatibilitydashboard.wpcomstaging.com"

      - name: Add "qit.test" to hosts file (Linux)
        run: sudo echo "127.0.0.1 qit.test" | sudo tee -a /etc/hosts

      - name: Start environment
        working-directory: src
        run: php qit-cli.php env:up

      - name: Test Site Up
        working-directory: src
        run: |
          SITE_URL=$(php qit-cli.php env:list --field=site_url)
          if [ "$(curl -o /dev/null -s -w '%{http_code}\n' $SITE_URL)" -ne 200 ]; then
            echo "Home page is not up."
            exit 1
          fi
          if [ "$(curl -s $SITE_URL/wp-json | jq -r '.name')" != "WooCommerce Core E2E Test Suite" ]; then
            echo "Name property does not match."
            exit 1
          fi

      - name: Assert that Docker Containers are All Running
        working-directory: src
        run: |
          CONTAINERS=$(php qit-cli.php env:list --field=docker_images)
          for container in $CONTAINERS; do
            echo "Checking container: $container"
            if [ "$(docker inspect -f '{{.State.Running}}' $container)" != "true" ]; then
              echo "Container $container is not running."
              exit 1
            fi
          done
          echo "All containers are running successfully."

      - name: Assert that Docker Network was Created
        run: |
          ENV_ID=$(php src/qit-cli.php env:list --field=env_id)
          if [ -z "$(docker network ls | grep $ENV_ID)" ]; then
              echo "Docker network was not created."
              exit 1
          fi
          echo "Docker network $ENV_ID was created successfully."

      - name: Store the environment path in a ENV var
        working-directory: src
        run: echo "TEMPORARY_ENV=$(php qit-cli.php env:list --field=temporary_env)" >> $GITHUB_ENV

      - name: Stop a random container from that environment.
        working-directory: src
        run: |
          CONTAINERS=$(php qit-cli.php env:list --field=docker_images)
          RANDOM_CONTAINER=$(echo $CONTAINERS | awk '{print $1}')
          echo "Stopping container: $RANDOM_CONTAINER"
          docker stop $RANDOM_CONTAINER

      - name: Run a env:list to trigger the Dangling Environment Cleanup
        working-directory: src
        run: php qit-cli.php env:list

      - name: Assert that the environment was cleaned up
        working-directory: src
        run: |
          # Get and print the output of the env:list command
          ENV_LIST_OUTPUT=$(php qit-cli.php env:list)
          echo "Output of env:list command: '$ENV_LIST_OUTPUT'"

          # Assert no environments are listed
          if [ "$ENV_LIST_OUTPUT" != "No environments running." ]; then
            echo "Environments are still listed. Cleanup not successful."
            exit 1
          fi
          echo "No environments listed. Environment cleanup successful."

          # Assert no Docker networks with "_qit_network_" in the name
          if [ -n "$(docker network ls | grep _qit_network_)" ]; then
            echo "Docker networks with '_qit_network_' in the name still exist. Cleanup not successful."
            exit 1
          fi
          echo "No Docker networks with '_qit_network_' in the name. Network cleanup successful."

          # Assert no Docker containers with "qit_env_" in the name
          if [ -n "$(docker ps -a | grep qit_env_)" ]; then
            echo "Docker containers with 'qit_env_' in the name still exist. Cleanup not successful."
            exit 1
          fi
          echo "No Docker containers with 'qit_env_' in the name. Container cleanup successful."
      