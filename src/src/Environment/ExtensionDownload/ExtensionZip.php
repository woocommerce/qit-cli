<?php

namespace QIT_CLI\Environment\ExtensionDownload;

use QIT_CLI\App;
use QIT_CLI\Environment\Docker;
use Symfony\Component\Console\Output\OutputInterface;
use Symfony\Component\Process\Process;

class ExtensionZip {
	/** @var OutputInterface */
	private $output;

	public function __construct( OutputInterface $output ) {
		$this->output = $output;
	}

	public function extract( string $zip_file, string $extract_to ): void {
		if ( ! file_exists( $zip_file ) ) {
			throw new \InvalidArgumentException( 'Zip file does not exist.' );
		}

		if ( ! file_exists( $extract_to ) ) {
			if ( ! mkdir( $extract_to, 0755, true ) ) {
				throw new \RuntimeException( 'Could not create directory.' );
			}
		}

		$this->maybe_validate_extension_zip( $zip_file );

		$docker = App::make( Docker::class );

		$args = [
			$docker->find_docker(),
			'run',
			'--rm',
			'--user',
			implode( ':', Docker::get_user_and_group() ),
			'-w',
			'/app',
			'-v',
			"$zip_file:/app/file.zip",
			'-v',
			"$extract_to:/app/extracted",
			'joshkeegan/zip:latest',
			'sh',
			'-c',
			'unzip /app/file.zip -d /app/extracted',
		];

		$zip_process = new Process( $args );
		$zip_process->mustRun( function ( $out, $type ) {
			$this->output->write( $out );
		} );
	}

	public function validate_extension_zip( string $zip_file ): void {
		if ( class_exists( \ZipArchive::class ) ) {
			/*
			 * Check that we downloaded a zip fle.
			 * Instead of using CHECKCONS, we iterate over the zip files without extracting it.
			 * This is to avoid a bug that CHECKCONS fails on zips generated by MacOS Archive Utility.
			 */
			$zip = new \ZipArchive();
			$zip->open( $zip_file );
			// Iterate over zip files without extracting it.
			for ( $i = 0; $i < $zip->numFiles; $i ++ ) {
				$filename = $zip->getNameIndex( $i );
				// If we find a .php file, we can bail, it's a zip.
				if ( substr( $filename, - 4 ) === '.php' ) {
					return;
				}
			}
			$zip->close();

			if ( ! unlink( $zip_file ) ) {
				$this->output->writeln( sprintf( 'Could not delete zip file. %s', $zip_file ) );
			}

			throw new \RuntimeException( sprintf( 'Invalid extension zip. It should contain at least one zip file. %s', $zip_file ) );
		} else {
			$this->output->writeln( '<comment>ZipArchive class not found. Cannot check if zip file is valid... Continuing...</comment>' );
		}
	}
}